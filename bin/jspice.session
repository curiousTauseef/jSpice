#!/usr/bin/python
#############################################################
#             /######            /##                        #
#            /##__  ##          |__/                        #
#        /##| ##  \__/  /######  /##  /#######  /######     #
#       |__/|  ######  /##__  ##| ## /##_____/ /##__  ##    #
#        /## \____  ##| ##  \ ##| ##| ##      | ########    #
#       | ## /##  \ ##| ##  | ##| ##| ##      | ##_____/    #
#       | ##|  ######/| #######/| ##|  #######|  #######    #
#       | ## \______/ | ##____/ |__/ \_______/ \_______/    #
#  /##  | ##          | ##                                  #
# |  ######/          | ##                                  #
#  \______/           |__/                                  #
#							    #
#                 Jorge I. Zuluaga (C) 2016		    #
#############################################################
# Function: jSpice kernel
#############################################################

#############################################################
#HEADER
#############################################################
print "Content-Type: text/html";

#############################################################
#EXTERNAL MODULES
#############################################################
import sys,os,inspect
PATH=os.path.realpath(
    os.path.abspath(os.path.split(
        inspect.getfile(
            inspect.currentframe()))[0]))
DIR=PATH+"/../"
sys.path.insert(0,DIR+"/bin")
from jspice.core import *

#############################################################
#CGI PARAMETERS
#############################################################
params=cgi.FieldStorage();
sessionid=getArg("sessionid","0"*20,params=params)
port=int(getArg("port",5500,params=params))
server=getArg("server","127.0.0.1",params=params)
os.system("mkdir -p %s/sessions/%s"%(DIR,sessionid))

#############################################################
#CANCEL BEHAVIOR
#############################################################
def sigHandler(signal,frame):
    import sys
    logEntry(flog,"Terminating server in port %d"%port)
    sys.exit(0)
signal.signal(signal.SIGINT,sigHandler)

#############################################################
#READ CONFIGURATION FILE
#############################################################
loadConf(DIR+"/jspice.cfg")

#############################################################
#LOG FILE
#############################################################
flog=open("%s/sessions/%s/session.log"%(DIR,sessionid),"a")

#############################################################
#INITIALIZE COMMUNICATIONS
#############################################################
qserv=False
try:
    # Testing provided port 
    context=zmq.Context()
    context=zmq.Context()
    socket=context.socket(zmq.REP)
    socket.bind("tcp://%s:%d"%(server,port))
    qserv=True
    logEntry(flog,"Starting session in server %s for session %s listening in port %d"%(server,
                                                                                       sessionid,
                                                                                       port),
             sessionid)
except:
    import numpy as np
    logEntry(flog,"Port provided %d is busy"%port)

    # Range of ports
    ports=np.arange(CONF["port_range"][0],CONF["port_range"][1])
    np.random.shuffle(ports)
    
    # Getting reserved ports 
    sports=[int(port[0]) for port in sqlExec("select port from sessions",DIR+"/sessions.db")]

    # Check ports
    for port in ports:
        try:
            context=zmq.Context()
            context=zmq.Context()
            socket=context.socket(zmq.REP)
            socket.bind("tcp://%s:%d"%(server,port))
            if port in sports:continue
            logEntry(flog,"Starting session in server %s for session %s listening in port %d"%(server,
                                                                                               sessionid,
                                                                                               port),
                     sessionid)
            qserv=True
            break
        except zmq.error.ZMQError:
            logEntry(flog,"Port %d is busy"%port,sessionid)

if not qserv:
    port=-1
    logEntry(flog,"No ports available",sessionid)

#############################################################
#REMOVE AND ADD MODULES
#############################################################
#REMOVE SENSIBLE MODULES
exec("del(%s)"%CONF["sensible_modules"])
#ADD NEW MODULES
for mod in CONF["numerical_modules"]:exec(mod)

#############################################################
#LOAD SPICE KERNELS
#############################################################
kernels=glob.glob(DIR+"/"+CONF["kernels_dir"]+"/*")
logEntry(flog,"Loading kernels:"+"{}".format(kernels),sessionid)
for kernel in kernels:
    spy.furnsh(kernel)
logEntry(flog,"Kernels load",sessionid)

#############################################################
#RECEIVE
#############################################################
while True:
    cmd=socket.recv()
    if cmd=="jspice=True":
        rlogEntry=logEntryClean
    else:
        rlogEntry=logEntry

    rlogEntry(flog,"Command received: %s"%cmd,sessionid)
    if "exit(" in cmd:break
    try:
        exec(cmd)
        rlogEntry(flog,"Command succesfully executed.",sessionid)
    except Exception as e:
        rlogEntry(flog,"Error:\n\t"+str(e))
    socket.send("{}".format(globals()))

rlogEntry(flog,"Exiting server",sessionid)
