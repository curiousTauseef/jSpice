#!/usr/bin/python
#############################################################
#             /######            /##                        #
#            /##__  ##          |__/                        #
#        /##| ##  \__/  /######  /##  /#######  /######     #
#       |__/|  ######  /##__  ##| ## /##_____/ /##__  ##    #
#        /## \____  ##| ##  \ ##| ##| ##      | ########    #
#       | ## /##  \ ##| ##  | ##| ##| ##      | ##_____/    #
#       | ##|  ######/| #######/| ##|  #######|  #######    #
#       | ## \______/ | ##____/ |__/ \_______/ \_______/    #
#  /##  | ##          | ##                                  #
# |  ######/          | ##                                  #
#  \______/           |__/                                  #
#							    #
#                 Jorge I. Zuluaga (C) 2016		    #
#############################################################
# Function: jSpice kernel
#############################################################

#############################################################
#EXTERNAL MODULES
#############################################################
import sys,os,inspect
PATH=os.path.realpath(
    os.path.abspath(os.path.split(
        inspect.getfile(
            inspect.currentframe()))[0]))
DIR=PATH+"/.."
sys.path.insert(0,DIR+"/bin")
from jspice.core import *

#############################################################
#LOG FILE
#############################################################
flog=open(DIR+"/log/test.log","a")

#############################################################
#CANCEL BEHAVIOR
#############################################################
def sigHandler(signal,frame):
    import sys
    logEntry(flog,"Terminating test")
    sys.exit(0)
signal.signal(signal.SIGINT,sigHandler)

#############################################################
#READ CONFIGURATION FILE
#############################################################
loadConf(DIR+"/jspice.cfg")

#############################################################
#LOAD SPICE KERNELS
#############################################################
for kernel in glob.glob(PATH+"/../"+CONF["kernels_dir"]+"/*"):
    spy.furnsh(kernel)

#############################################################
#REMOVE AND ADD MODULES
#############################################################
#REMOVE SENSIBLE MODULES
exec("del(%s)"%CONF["sensible_modules"])
#ADD NEW MODULES
for mod in CONF["numerical_modules"]:exec(mod)

#############################################################
#TEST CODE
#############################################################
import sys
import jsonpickle

"""
print spy.jutcnow()
print spy.jlocnow()
print spy.jetnow()

"""

class ComplexEncoder(json.JSONEncoder):
    def default(self, obj):
        try:
            json.JSONEncoder.default(self, obj)
        except TypeError:
            return jsonpickle.dumps(obj)
         
def run():
    et=spy.str2et("01/01/2017 00:00:00")
    a=np.array([1,2,3])
    s=spy.spkgps(3,et,"J2000",5)
    print s
    try:
        exec("b=f(1)")
    except:
        pass

    def f(x):
        return x**2

    loc=locals()
    print loc
    j=encodeLocals(loc)
    #j=json.dumps(loc,cls=ComplexEncoder)
    print j
    #j=jsonpickle.dumps(loc)

    """
    cmd="\\n\\net+=dt;\\ndeltet=spy.deltet(et,ET);\\ncal=spy.etcal(et-deltet,100);\\n\\nstate3,ltmp=spy.spkgeo(3,et,ECLIPJ2000,0);\\npos3=state3[:3];\\nvel3=state3[3:];\\n\\nsum=0\\nfor i in xrange(10):\\n\\tsum+=1\\n\\n"
    """

    dt=1
    et=2
    cmd="\n\net+=dt;\ndeltet=spy.deltet(et,'ET');\ncal=spy.etcal(et-deltet,100);\n\nstate3,ltmp=spy.spkgeo(3,et,'ECLIPJ2000',0);\npos3=state3[:3];\nvel3=state3[3:];\n\nsum=0\n"
    exec(cmd)


run()
